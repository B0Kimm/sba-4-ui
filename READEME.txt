Construction of the project

ui structure
react(hook) -> ui
redux -> userState() -> data
router -> react-router -> routing
||
RESTful (axios)
||
api structure
tensorflow -> core -> api  (ai)
sqlalchemy -> data(mariadb) 
flask -> @app -> blueprint -> routing



_____________________________

public index html == index.css 'root'

components -> pages (dimension의 차이) ===> atomic design
scalar -> vector -> matrix -> cube -> n dimention's tensor (tensor; dimension의 차이)

atomic design (/atom -> molsecules->orgainism->/template->pages)
마치 블록(atom) 조각을 맞추는 듯한 형태로 진행

entry point = app.js / app.py 1개만 둔다

Dependency Injection ; package.json

.tsx = typescript
Js = Javascript
Jsx = Javascript extension (상속 = extension)

jsx = js + html construction , return 구조

jsx(화면의 조각) + index.js => components
---메모리의 한계 때문에 ----
return 됨: 호출이 되지 않으면 존재하지 않음 (dynamic 구조/ 페이지가 넘어가면 메모리에서 없어짐/ 순간의 정보를 계속 불러오고 지우고 함(메모리가 좋아야함))
return이 안됨 : 호출을 하지 않으면 존재함 (static 구조)

초기화 작업 == __init__; index.js (외부 호출) index에 들어가는 것은 객체의 소속
coding convention: class 기반 개념이 남은 것 == Capital.jsx
                    lower.js

framework (내가 들어가서 사용) / library(끌어와서 사용)

<Route exact path="/" component={Home}></Route> == 정확히 (exact) '/'일때 Home을 보여줘
exact = 반드시 정확히

**구조 외우기**
import from "/" : 내부에서
import from "" : package.json에 있음 such as react etc...

export {default as x} from "path"

----------------141020-----------

ui structure
react(hook) -> ui
redux -> userState() -> data
router -> react-router -> routing
index.js
||
RESTful (axios)
||
api structure
tensorflow -> core -> api  (ai)
sqlalchemy -> data(mariadb) 
flask -> @app -> blueprint -> routing
__init__.py

User, Board, Item, Home

컴공 -> 대수학(산수)
(exist) T =1, F=0                                   --------T, f
function                                            --------function 추가
object = function(기능) + propertys(속성)
return parameter(매개변수)
(REACT)export import 

2 = 1 + ?

함수의 4개의 형태
return parameter(매개 변수)
0       0                   ---> Learnable (무한동력)
0       1                   ----> consumer
1       0                   -----> supplier
1       1                   -----> function

dim
extension
object

OOP object = function + props (object = class)
FP function = object - props (class = F)
HTML, DB(SQL) props = object - function


Javascript = 함수도 객체다

jsx HTML(화면)
js function(기능)
==> directory = object(객체)

상위 객체 = class
하위 객체 = element


class Member{

    private String name;
    public setName(string name), getName()
}

객체지향 4대 원칙

은닉화, 다형성, 상속, 추상화
DTO : get, set
extends : object
interface: @Override


atomic <-> duck typing


============151020========
SPA(Single page application just like ebook)

1층 APP (yarn 기본 페이지)

pages
2층 Home, User,Board, Item
components (Nav)를 통해 이동

4층 Menu
templates

3층 UserCRUD

component
template
Menu


container == userState : data processing하는 기능이 추가되었을때 